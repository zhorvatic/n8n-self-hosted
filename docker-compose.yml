services:
  n8n:
    image: docker.n8n.io/n8nio/n8n:1.106.3
    env_file:
      - .env
    environment:
      - N8N_HOST=n8n.zvonkos.com
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_EDITOR_BASE_URL=https://n8n.zvonkos.com
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_DIAGNOSTICS_CONFIG_FRONTEND=false
      - WEBHOOK_URL=https://n8n.zvonkos.com
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - /mnt/n8n_data:/home/node/.n8n
    networks:
      - backend
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:5678/healthz', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 15s
      timeout: 2s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "n8n", "-d", "n8n", "-h", "127.0.0.1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"   
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      n8n:
        condition: service_healthy
      searxng:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1/nginx-healthz"]
      interval: 30s
      timeout: 2s
      retries: 3
      start_period: 15s

  searxng:
    image: searxng/searxng:latest
    restart: unless-stopped
    volumes:
      - ./searxng:/etc/searxng:ro
      - searxng_cache:/var/cache/searxng
    networks:
      - backend
    expose:
      - "8080"  
    healthcheck:
      test: ["CMD","wget","-qO-", "http://127.0.0.1:8080/"]
      interval: 60s
      timeout: 3s
      retries: 3
      start_period: 45s

volumes:
  n8n_data:
  pg_data:
  searxng_cache:

networks:
  backend:
    driver: bridge
